install.packages("string")
install.packages("stringr")
install.packages("KoNLP")
setwd("D:/Workspace/R_Data_Analysis/Part3")
list.files()
list.files(recursive = T)
scan1 <- scan('Data/scan_1.txt')
scan2 <- scan('Data/scan_2.txt')
scan2
scan2 <- scan('Data/scan_2.txt', what = "")
scan2
scan3 <- scan('Data/scan_3.txt')
scan3 <- scan('Data/scan_3.txt',what = "")                        ##it dones't read when it doesn't have "what="
scan3
input <- scan()
input
input <- scan(what = "")
input
input3 <- readlines()
input3 <- readline()
input3
input4 <- readLines("scan_4.txt")
input4 <- readLines("Data/scan_4.txt")
input4
read.table('Data/fruits.txt')
read.table('Data/fruits.txt', header = T)
read.table('Data/fruits_2.txt', header = T)
read.table('Data/fruits_2.txt', header = F)
read.table('Data/fruits_2.txt', skip = 2)
read.table('Data/fruits_2.txt', nrows = 2)
read.csv('Data/fruits_3.csv')
read.csv('Data/fruits_4.csv')
read.csv('Data/fruits_4.csv', header = F)
read.table('Data/fruits_4.csv'
)
read.csv('Data/fruits_4.csv')
read.csv('Data/fruits_4.csv', header = T)
read.csv('Data/fruits_4.csv', header = F)
label <- c("NO", "name","price", "qty")
furit4 <- read.csv('Data/fruits_4.csv', header = F,col.names = label)
furit4
install.packages("googleVis")
library(googleVis)
install.packages("sqldf")
library(sqldf)
Fruits
write.csv(Fruits, "Fruits_sql.csv", quote = F, row.names = F)
fruits_2 <- read.csv.sql("Fruits_sql.csv", sql = "SELECT * FROM file WHERE year = 2008")
fruits_2 <- read.csv.sql("Data/Fruits_sql.csv", sql = "SELECT * FROM file WHERE year = 2008")
fruits_2
install.packages("XLConnect")
data1 <- loadWorkbook("Data/fruits_6.xls", create=T)
library(XLConnect)
data1 <- loadWorkbook("Data/fruits_6.xls", create=T)
data2 <- readWorksheet(data1, sheet = "sheet1",
startRow = 1, endRow = 8, startCol = 1, endCol = 5)
data2
fruits6 <- read.delim("clipboard", header = T)
fruits6
install.packages("readxl")
library(readxl)
cust_profile <- read_excel("Data/fruits_6.xls", # path
sheet = "sheet1", # sheet name to read from
range = "A2:D6", # cell range to read from
col_names = TRUE, # TRUE to use the first row as column names
col_types = "guess", # guess the types of columns
na = "NA") # Character vector of strings to use for missing values
cust_profile <- read_excel("Data/fruits_6.xls", # path
sheet = "Sheet1", # sheet name to read from
range = "A2:D6", # cell range to read from
col_names = TRUE, # TRUE to use the first row as column names
col_types = "guess", # guess the types of columns
na = "NA") # Character vector of strings to use for missing values
cust_profile
?read.csv
vec1 <- c(1,2,3,4,5)
vec1 <- c(1:5)
vec2 <- c('a','b','c','d','e')
max(vec1)
max(vec2)
mean(vec2)
min(vec1)
sd(vec1)
sd(vec2)
sum(vec1)
var(vec1)
library(googleVis)
Fruits
aggregate("Sales" ~ "Year", Fruits ,sum )
aggregate(Sales ~ Year, Fruits ,sum )
aggregate(Profit ~ Year, Fruits ,var )
aggregate(Profit ~ Year, Fruits ,max)
aggregate(Profit ~ Year, Fruits ,sd)
aggregate(Sales ~ Fruit, Fruits,max)
aggregate(Year ~ Fruit, Fruits,max)
apply(mat1, 1, sum)
mat1 <- matrix(c(1:6),nrow = 2, byrow = T);
apply(mat1, 1, sum)
apply(mat1, 2, sum
)
apply(mat1,2, prod)
apply(mat1[,c(2,3)])
apply(mat1[,c(2,3)], 1)
apply(mat1[,c(2,3)], 1, sum)
apply(mat1[,c(2,3)], sum)
apply(mat1[,c(2,3)], 1, sum)
list1 <- Fruits$Sales
list2 <- Fruits$Date
apply(list1, list2, max)
list1 <- list(Fruits$Sales)
list1 <- list(Fruits$Sales)
list2 <- list(Fruits$Date)
apply(c(list1, list2), max)
lapply(c(list1, list2), max)
list2 <- list(Fruits$Profit)
lapply(c(list1, list2), max)
sapply(c(list1, list2), max)
attach(Fruits)
tapply(Sales, Fruit, sum)
tapply(Sales, Year , sum)
vec1 <- c(1:5)
vec2 <- c(10:50, 10)
vec2 <- c(seq(10:50), 10)
vec2 <- seq(10:50)
vec2 <- seq(10:50,10)
vec2 <- seq(10,50,10)
vec3 <- seq(100, 500 ,100)
mapply(sum,vec1, vec2, vec3)
data1 <- read.csv('Data/data1.csv')
data1
apply(data1, 2, sum)
apply(data1, 1, sum)
attach(data1)
tapply(data1, 1, sum)
tapply(data1, Year, sum)
data1 <- read.csv('Data/data1.csv', header=F)
data1
data1 <- read.csv('Data/data1.csv', header=T)
data1
sum(data1, 'X2000년년')
sum(data1, 'X2000년')
list1 <- list(data1$X2000년)
list1 <- list(data1$X2000년)
list1
list1 <- list(data1$X2000년)
list2 <- list(data1$X2001년)
list3 <- list(data1$X2002년)
list4 <- list(data1$X2003년)
list5 <- list(data1$X2004년)
list6 <- list(data1$X2005년)
list7 <- list(data1$X2006년)
list8 <- list(data1$X2007년)
list9 <- list(data1$X2008년)
list10 <- list(data1$X2009년)
list11 <- list(data1$X2010년)
list12 <- list(data1$X2011년)
list13 <- list(data1$X2012년)
list14 <- list(data1$X2013년)
sapply(c(list1,list2,list3,list4,list5,list6,list7,list8,list9,list10,list11,list12,list13,list14), sum)
apply(data1, 1, sum) # 1 - 행 단위 계산
data1 <- read.csv('Data/data1.csv', header=T)
data1
apply(data1, 1, sum) # 1 - 행 단위 계산
apply(data1, 2, sum)
data1 <- read.csv('Data/data1.csv', header=F)
apply(data1, 1, sum) # 1 - 행 단위 계산
data1 <- read.csv('Data/data1.csv')
data1
aggregate(Sales ~ Year, Fruits ,sum )
aggregate(y, data1, sum)
aggregate(X2000년 ~ X2013년, data1, sum)
aggregate(X2000년)
aggregate(X2000년, data1 , sum)
data1
tapply(X2000년, 연도별, sum)
tapply(X2000년, 연령별, sum)
tapply(X, 연령별, sum)
tapply(X200, 연령별, sum)
aggregate(X2000년 ~ 연령별, data1, sum)
tapply(X20c(00:13), 연령별, sum)
tapply(X2000년, 연령별, sum)
apply(list1,1,sum )
apply(X2000년, 2,sum)
sapply(X2000년,sum)
data1 <- read.csv('Data/data1.csv',header = F)
data1
tapply(2000년, 연령별, sum)
tapply(연도별별, 연령별, sum)
tapply(연도별, 연령별, sum)
tapply(년도별, 연령별, sum)
apply(data1, 1, sum)
label <- c('', '2000년','2001년','2002년','2003년','2004년','2005년','2006년','2007년','2008년','2009년','2010년','2011년',
'2012년','2013년')
data1 <- read.csv('Data/data1.csv',header = F, col.names = label)
data1
data1 <- read.csv('Data/data1.csv',header = F)
data1
data1 <- read.csv('Data/data1.csv')
data1
data1 <- read.csv('Data/data1.csv',header = F)
data1
sapply(c(list1,list2,list3,list4,list5,list6,list7,list8,list9,list10,list11,list12,list13,list14), sum)
apply(data1[,c(2:13)], 1, sum)
apply(data1[2,c(2:13)], 1, sum)
apply(data1[3,c(3:13)], 1, sum)
apply(data1[c(3:7),c(3:13)], 1, sum)
apply(data1[c(3:7),c(3:13)], 2, sum)
data1 <- read.csv('Data/data1.csv')
data1
apply(data1[c(3:7),c(3:13)], 2, sum)
apply(data1[c(2:7),c(2:13)], 2, sum)
apply(data1[c(1:7),c(2:13)], 2, sum)
apply(data1[c(2:5),c(2:13)], 2, sum)
apply(data1[c(2:6),c(2:13)], 2, sum)
apply(data1[c(1:6),c(2:13)], 2, sum)
apply(data1[c(1:5),c(2:13)], 2, sum)
apply(data1[,c(2:13)], 1, sum)
apply(data1[c(1:5),c(2:13)], 1, sum)
apply(data1[c(3:16),c(1:5)], 1, sum)
apply(data1[c(0:5),c(2:13)], 1, sum)
apply(data1[c(0:6),c(2:13)], 1, sum)
apply(data1[c(0:6),c(2:15)], 1, sum)
apply(data1[c(0:5),c(2:15)], 1, sum)
apply(data1[c(0:5),c(1:15)], 1, sum)
apply(data1[c(1:5),c(1:15)], 1, sum)
apply(data1[c(0:5),c(1:15)], 1, sum)
apply(data1[c(0:5),c(2:15)], 1, sum)
data2 <- read.csv('Data/1-4호선승하차승객수.csv')
data2
aggregate(노선 ~ 승차, data2, sum)
aggregate(노선번호호 ~ 승차, data2, sum)
aggregate(노선번호 ~ 승차, data2, sum)
aggregate(승차 ~ 노선번호, data2, sum)
attach(data2)
tapply(노선번호, 승차, sum)
tapply(승차차, 노선번호, sum)
tapply(승차, 노선번호, sum)
tapply(하하차, 노선번호, sum)
tapply(하차, 노선번호, sum)
list01 <- list(data2$승차)
list01 <- list(data2$승차)
data2
list01 <- list(data2$승차)
list02 <- list(data2$하차)
list02 <- list(data2$하차)
lapply(c(list01,list02), sum)
sapply(c(list01,list02), sum)
tapply(c(list01,list02), data2, sum)
tapply(data2[,c(4,5)], data2, sum)
tapply(data2[,c(3,4)], data2, sum)
tapply(data2[c(1:80),c(3,4)], data2, sum)
tapply(data2[c(1:80),c(2,3)], data2, sum)
tapply(data2[c(1:80),c(4,5)], data2, sum)
tapply(data2[,c(4,5)], data2, sum)
tapply(승차차, data2, sum)
tapply(승차, data2, sum)
sapply(data2[,c(4,5)], sum)
sapply(data2[,c(3,4)], sum)
data2
list01 <- list(data2$승차)
list01
sum01 <- sapply(data2[,c(3,4)], sum)
aggregate(노선번호 ~ sum01, data2, sum)
apply(data1[,-1], 1, sum)
aggregate(노선번호 ~ 승차차, data2, sum)
aggregate(노선번호 ~ 승차, data2, sum)
aggregate(승차 ~ 노선번호, data2, sum)
aggregate(하차 ~ 노선번호, data2, sum)
aggregate(승차+하차 ~ 노선번호, data2, sum)
mat1 <- matrix(c(1:6), nrow = 2)
mat1
mat1 <- matrix(c(1:6), nrow = 2, byrow = T)
mat1
a <- rep(1,3)
sweep(mat1, 2, a)
b <- matrix(c(2,2)
b
b <- matrix(c(2,2))
b
sweep(mat1, 1, b)
a <- c(1:5)
length(a)
v2 <- c(1, -2, 3, -5)
abs(v2)
ceiling(2.3)
floor(2.4)
choose(6,2)
func_test1 <- function(a, b) {
a - b
}
func_test1(3,2)
func_test1(2,3)
func_test2 <- function(a,b) {
abs(func_test1(a,b))
}
func_test2(2,3)
data1 <- read.csv('Data/data1.csv')
data1 <- read.csv('Data/data1.csv')
apply(data1[,c(2:15)], 1, sum)
apply(data1[,c(2:13)], 2, sum)
apply(data1[c(1:5),c(2:13)], 2, sum)    # apply(data1[c(1:5),c(2:13)], 2, sum) original code
apply(data1[,c(2:13)], 2, sum)    # apply(data1[c(1:5),c(2:13)], 2, sum) original code
